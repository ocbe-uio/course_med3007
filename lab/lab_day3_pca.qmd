---
title: "R Lab (day 3): Data exploration, Principal Component Analysis"
format: 
  html:
    code-fold: false
    code-tools: true
---

Datasets

The following datasets are used in the exercises. Download datasets from GitHub repository, or from Canvas.

* `Food.txt` ([link]())
* `nci60`
* `ch12ex13.csv`

R script 

Lab lecture 



## Exercise 1: Food

In the first exercise, we explore a low-dimensional dataset, `Food.txt`. 

(This example is not a genomics example, however it is useful to illustrate important concepts in data exploration and dimensional reduction via PCA.)  

`Food.txt` contains data on food consumption of a variety of food categories in European counries. First load the dataset. 


```{r}
#| label: pca-food-loaddata
#| warning: false
#| echo: true

food <- read.table('data/Food.txt', header=T)
# we change the name from pulses to a more common name, legume
colnames(food)[7] <- 'Legume'
head(food) # print first 6 lines 
```

### Explore the dataset

The first thing to do after loading the dataset is to get to know its content better. 

Try to find out the following information about the data:

* the **dimension** (numbers of columns and rows)
* the **column names**, and **row names**

We can also look at one food in particular, `Fish`: find the mean, maximum and minimum value for this variable. This is to investigate one column of the data.


```{r}
#| label: pca-food-summary
#| warning: false
#| echo: true

dim(food)
colnames(food)
rownames(food)

# explore one variable
mean(food$Fish)
max(food$Fish)
min(food$Fish)
```

Now we investigate the data by row. Each row is a country. We can extract the data ('filter') for Norway, for exmaple.

It is also easy to get data for more than one country, such as from Denmark and Sweden. 

```{r}
#| label: pca-food-country
#| warning: false
#| echo: true

# subsetting
food[rownames(food) == 'Norway',]
food[rownames(food) %in% c('Norway', 'Denmark', 'Sweden'),]
```

Now we can make some simple visualizations. We can look at the distribution for each variable by making a histogram.

```{r}
#| label: pca-food-histogram
#| warning: false
#| echo: true

hist(food$Fish, main = 'Histogram of Fish')
hist(food$Fish, breaks = 20, main = 'Histogram of Fish')

hist(food$Meat, main = 'Histogram of Meat')
```


A box plot is another commonly used tool for presenting data distribution, for a few variables together. This way you can compare different foods.

```{r}
#| label: pca-food-boxplot
#| warning: false
#| echo: true

# las rotates the axis text 90 degrees
boxplot(food, las = 2,
        main = 'Food consumption across European countries')
```

We can look at pairs of food, to identify the whether there is some kind of relationship between them. For example, do countries that consume more fish also consume more meat? What about cereal and fruit?

A scatter plot with one food on its x-axis and another on the y-axis can be useful.

We can add the country names on top of the scatter plot to provide more information.

```{r}
#| label: pca-food-scatter
#| warning: false
#| echo: true

# two variables
plot(food$Fish, food$Meat, pch=20, main = 'Fish vs Meat')

# to add country: run this line as well
# text(food$Fish, food$Meat, labels = rownames(food))

# choose aother pair of food, add country label
plot(food$Cereals, food$Fruit, main = 'Cereals vs Fruit')
text(food$Cereals, food$Fruit, labels = rownames(food))
```


You can make pair-wise scatter plots for all the food pairs. However when you have many variables, these plots become less easy to read. 

```{r}
#| label: pca-food-scatter2
#| warning: false
#| echo: true

# pair-wise scatter
plot(food, main = 'Pair-wise scatter plot')
```



### Principal component analysis 

We can use principal component analysis PCA to explore the dataset, and reveal more information beyond the original data points.

The command we use is `prcomp(data, scale)`.

* `data` is the dataset to carry out PCA. Sometimes you need to do some processing such as centering and scaling.
* `scale` is an argument that asks the program to scale the data for us automatically. We specify it to be TRUE.

After running the command, you can print out the results using `summary`.

```{r}
#| label: pca-food-pca
#| warning: false
#| echo: true

# need to scale the data
pc_food <- prcomp(food, scale=TRUE)
# pc_food
summary(pc_food)
```


```{r}
#| label: pca-food-loading
#| warning: false
#| echo: true

loading_food <- pc_food$rotation
# print out the result, but only keep 2 digits
round(loading_food, digits = 2)
```


Scores (projections)

```{r}
#| label: pca-food-scores
#| warning: false
#| echo: true

scores_food <- pc_food$x
round(scores_food, digits = 2)
```


```{r}
#| label: pca-food-variance
#| warning: false
#| echo: true

pc_food_var <- pc_food$sdev^2
pc_food_pve <- pc_food_var/sum(pc_food_var)
pc_food_pve
cumsum(pc_food_pve)
```


### Visualize PCA results

Biplot of the principal components

```{r}
#| label: pca-food-biplot
#| warning: false
#| echo: true

# by default, pc1 pc2
biplot(pc_food)
# same as biplot(pc_food, choices = c(1,2)) 

biplot(pc_food, choices = c(1,3)) # pc1, pc3
```



```{r}
#| label: pca-food-plot_var
#| warning: false
#| echo: true

par(mfrow = c(1, 2))
# variance of the PCs
barplot(pc_food_var, las=2,
        main='Principal components', ylab='Variances',
        names.arg = paste('PC ',1:length(pc_food_var),sep=''))

# variance of the original data variables
barplot(apply(food, 2, sd)^2, las=2, main='Original Variables', ylim=c(0,150), ylab='Variances')
```


```{r}
#| label: pca-food-plot_pve
#| warning: false
#| echo: true

par(mfrow = c(1,1))
# PVE
plot(cumsum(pc_food_pve), type='b', axes=F, xlab='number of components',
     ylab='contribution to total variance', ylim=c(0,1))
abline(h=1, col='blue')
abline(h=0.8, lty=2, col='blue')
box()
axis(2,at=0:10/10,labels=0:10/10)
axis(1,at=1:ncol(food),labels=1:ncol(food),las=2)
```

## Exercise 2: NCI60

Now we move to a typical large-scale biological data set (this is partly based on Lab 10.3 in James et al., 2013).

We have already seen the NCI60 cancer cell line microarray data set, consisting of 6830 gene expression measurements on 64 cancer cell lines.


```{r}
#| label: pca-nci-loaddata
#| warning: false
#| echo: true

library(ISLR)
nci.labs <- NCI60$labs # Sample labels (tissue type)
nci.data <- NCI60$data # Gene expression data set
```

```{r}
#| label: pca-nci-summary
#| warning: false
#| echo: true
# what if I would like to compute the mean of each gene within each tissue type?
tissue.means <- apply(nci.data, 2, function(x){tapply(x, nci.labs, mean)})
dim(tissue.means)
table(nci.labs)
```

Compute the PC

```{r}
#| label: pca-nci-pc
#| warning: false
#| echo: true
# PCA analysis after scaling the variables to standard deviation one:
pr.out <- prcomp(nci.data, scale=TRUE)
```


Print the summary output
 
```{r}
#| label: pca-nci-pcsummary
#| warning: false
#| echo: true
#| eval: false
summary(pr.out)
```


```{r}
#| label: pca-nci-plotpc
#| warning: false
#| echo: true
pr.var <- pr.out$sdev^2
pve <- pr.var/sum(pr.var)
pve <- 100*pve

par(mfrow=c(1,2))
plot(pve,  type="o", ylab="PVE", xlab="Principal Component", col="blue")
plot(cumsum(pve), type="o", ylab="Cumulative PVE", xlab="Principal Component", col="brown3")
```

### How many PCs to keep?

```{r}
#| label: pca-nci-keeppc
#| warning: false
#| echo: true
mysel80 <- which(cumsum(pve) > 80)[1] # explains 80% of the variability
mysel70 <- which(cumsum(pve) > 70)[1] # explains 70% of the variability

par(mfrow=c(1,2)) # plot contains two smaller plots next to each other
plot(pve,  type="o", ylab="PVE", xlab="Principal Component", col="blue")
abline(v = mysel80)
abline(v = mysel70, col=3)
plot(cumsum(pve), type="o", ylab="Cumulative PVE", xlab="Principal Component", col="brown3")
abline(v = mysel80)
abline(h = 80)
abline(v = mysel70, col=3)
abline(h = 70, col=3)
```


If we decide to only keep the principal components that explains 70% of the variance, we end up with 24 components, which we can further analyse to better understand the relationships between the variables. For simplicity we only look at the first few components.

We plot the first few principal component score vectors, to visualize the results. The observations (cell lines) corresponding to a given cancer type will be plotted in the same colour.

```{r}
#| label: pca-nci-plot2
#| warning: false
#| echo: true
Cols=function(vec){
  cols=rainbow(length(unique(vec)))
  return(cols[as.numeric(as.factor(vec))])
}

# Plot the first vs second and first vs third principal component score vectors,
# with colors associated to labels (using the Cols() helper function)
par(mfrow=c(1,2))
plot(pr.out$x[,1:2], col=Cols(nci.labs), pch=19,xlab="PC 1",ylab=" PC 2")
plot(pr.out$x[,c(1,3)], col=Cols(nci.labs), pch=19,xlab="PC 1",ylab=" PC 3")
legend('topleft', col=rainbow(length(unique(nci.labs))), legend=unique(nci.labs), bty='n', lwd=2, cex=.6)
```



## Exercise 3: Gene expression data

CH12Ex13 from statistical learning

Consider again the gene expression data set "Ch12Ex13.csv" (which can be also found on the book website, www.StatLearning.com) that consists of 40 tissue samples with measurements on 1,000 genes.

The first 20 samples are from healthy patients, while the second 20 are from a diseased group.


Load in the data using read.csv(). You will need to select header=F.

Alternatively: load in the data using "Import dataset" in the upper right window, and click "no" on the "Heading" option.

Perform a PCA of these data and visualize the results. 

Note: remember to check if the variables (genes) are on the columns in the dataset before running the PCA. If they are not: use t() to transform the dataset.



```{r}
#| label: pca-ge-loaddata
#| warning: false
#| echo: true

# set the path to your own!
exp.data <-  read.csv("data/Ch12Ex13.csv",header=FALSE)

# I want each row to represent a sample, and each column a gene
exp.data <- t(exp.data)
dim(exp.data)

# should have n=40 samples/rows, and 1000 columns --> OK!
groups <- c(rep(1,20), rep(2,20)) # group variable
```

Carry out PCA

```{r}
#| label: pca-ge-pca
#| warning: false
#| echo: true

# PCA
pr.exp <- prcomp(exp.data, scale=TRUE)

# Plot proportion of variance explained
pr.var <- pr.exp$sdev^2
pve <- pr.var/sum(pr.var)
pve <- 100*pve
par(mfrow=c(1,2))
plot(pve, type="o", ylab="PVE", xlab="Principal Component", col="blue")
plot(cumsum(pve), type="o", ylab="Cumulative PVE", xlab="Principal Component", col="red")
```

Looks like most of the principal components are needed to explain the data well. Maybe we can decide to keep 25-30 components?

Can also plot some of the first principal components

```{r}
#| label: pca-ge-plot
#| warning: false
#| echo: true

# Remember the use the helper-function to get colours
Cols=function(vec){
  cols=rainbow(length(unique(vec)))
  return(cols[as.numeric(as.factor(vec))])
}

par(mfrow=c(1,2)) # plot-window has two small plots next to each other
plot(pr.exp$x[,1:2], col=Cols(groups), pch=19, xlab="PC 1", ylab=" PC 2")
plot(pr.exp$x[,c(1,3)], col=Cols(groups), pch=19,xlab="PC 1",ylab=" PC 3")
legend('topleft', col=rainbow(length(unique(groups))), legend=paste('group ',unique(groups),sep=''), bty='n', lwd=2, cex=.6)
```





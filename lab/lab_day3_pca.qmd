---
title: "R Lab (day 3): EDA, Principal Component Analysis"
format: 
  html:
    code-fold: false
    code-tools: true
---

Datasets

R script

Lab lecture 

(If not enough content, try include the data manipulation in R + another genomics dataset)

## NCI60

Now we move to a typical large-scale biological data set (this is partly based on Lab 10.3 in James et al., 2013).

We have already seen the NCI60 cancer cell line microarray data set, consisting of 6830 gene expression measurements on 64 cancer cell lines.


```{r}
#| label: pca-nci-loaddata
#| warning: false
#| echo: true

library(ISLR)
nci.labs <- NCI60$labs # Sample labels (tissue type)
nci.data <- NCI60$data # Gene expression data set
```

```{r}
#| label: pca-nci-summary
#| warning: false
#| echo: true
# what if I would like to compute the mean of each gene within each tissue type?
tissue.means <- apply(nci.data, 2, function(x){tapply(x, nci.labs, mean)})
dim(tissue.means)
table(nci.labs)
```

Compute the PC

```{r}
#| label: pca-nci-pc
#| warning: false
#| echo: true
# PCA analysis after scaling the variables to standard deviation one:
pr.out <- prcomp(nci.data, scale=TRUE)
```


Print the summary output
 
```{r}
#| label: pca-nci-pcsummary
#| warning: false
#| echo: true
#| eval: false
summary(pr.out)
```


```{r}
#| label: pca-nci-plotpc
#| warning: false
#| echo: true
pr.var <- pr.out$sdev^2
pve <- pr.var/sum(pr.var)
pve <- 100*pve

par(mfrow=c(1,2))
plot(pve,  type="o", ylab="PVE", xlab="Principal Component", col="blue")
plot(cumsum(pve), type="o", ylab="Cumulative PVE", xlab="Principal Component", col="brown3")
```

### How many PCs to keep?

```{r}
#| label: pca-nci-keeppc
#| warning: false
#| echo: true
mysel80 <- which(cumsum(pve) > 80)[1] # explains 80% of the variability
mysel70 <- which(cumsum(pve) > 70)[1] # explains 70% of the variability

par(mfrow=c(1,2)) # plot contains two smaller plots next to each other
plot(pve,  type="o", ylab="PVE", xlab="Principal Component", col="blue")
abline(v = mysel80)
abline(v = mysel70, col=3)
plot(cumsum(pve), type="o", ylab="Cumulative PVE", xlab="Principal Component", col="brown3")
abline(v = mysel80)
abline(h = 80)
abline(v = mysel70, col=3)
abline(h = 70, col=3)
```


If we decide to only keep the principal components that explains 70% of the variance, we end up with 24 components, which we can further analyse to better understand the relationships between the variables. For simplicity we only look at the first few components.

We plot the first few principal component score vectors, to visualize the results. The observations (cell lines) corresponding to a given cancer type will be plotted in the same colour.

```{r}
#| label: pca-nci-plot2
#| warning: false
#| echo: true
Cols=function(vec){
  cols=rainbow(length(unique(vec)))
  return(cols[as.numeric(as.factor(vec))])
}

# Plot the first vs second and first vs third principal component score vectors,
# with colors associated to labels (using the Cols() helper function)
par(mfrow=c(1,2))
plot(pr.out$x[,1:2], col=Cols(nci.labs), pch=19,xlab="PC 1",ylab=" PC 2")
plot(pr.out$x[,c(1,3)], col=Cols(nci.labs), pch=19,xlab="PC 1",ylab=" PC 3")
legend('topleft', col=rainbow(length(unique(nci.labs))), legend=unique(nci.labs), bty='n', lwd=2, cex=.6)
```



## Gene expression data

CH12Ex13 from statistical learning

Consider again the gene expression data set "Ch12Ex13.csv" (which can be also found on the book website, www.StatLearning.com) that consists of 40 tissue samples with measurements on 1,000 genes.

The first 20 samples are from healthy patients, while the second 20 are from a diseased group.


Load in the data using read.csv(). You will need to select header=F.

Alternatively: load in the data using "Import dataset" in the upper right window, and click "no" on the "Heading" option.

Perform a PCA of these data and visualize the results. 

Note: remember to check if the variables (genes) are on the columns in the dataset before running the PCA. If they are not: use t() to transform the dataset.



```{r}
#| label: pca-ge-loaddata
#| warning: false
#| echo: true

# set the path to your own!
exp.data <-  read.csv("data/Ch12Ex13.csv",header=FALSE)

# I want each row to represent a sample, and each column a gene
exp.data <- t(exp.data)
dim(exp.data)

# should have n=40 samples/rows, and 1000 columns --> OK!
groups <- c(rep(1,20), rep(2,20)) # group variable
```

Carry out PCA

```{r}
#| label: pca-ge-pca
#| warning: false
#| echo: true

# PCA
pr.exp <- prcomp(exp.data, scale=TRUE)

# Plot proportion of variance explained
pr.var <- pr.exp$sdev^2
pve <- pr.var/sum(pr.var)
pve <- 100*pve
par(mfrow=c(1,2))
plot(pve, type="o", ylab="PVE", xlab="Principal Component", col="blue")
plot(cumsum(pve), type="o", ylab="Cumulative PVE", xlab="Principal Component", col="red")
```

Looks like most of the principal components are needed to explain the data well. Maybe we can decide to keep 25-30 components?

Can also plot some of the first principal components

```{r}
#| label: pca-ge-plot
#| warning: false
#| echo: true

# Remember the use the helper-function to get colours
Cols=function(vec){
  cols=rainbow(length(unique(vec)))
  return(cols[as.numeric(as.factor(vec))])
}

par(mfrow=c(1,2)) # plot-window has two small plots next to each other
plot(pr.exp$x[,1:2], col=Cols(groups), pch=19, xlab="PC 1", ylab=" PC 2")
plot(pr.exp$x[,c(1,3)], col=Cols(groups), pch=19,xlab="PC 1",ylab=" PC 3")
legend('topleft', col=rainbow(length(unique(groups))), legend=paste('group ',unique(groups),sep=''), bty='n', lwd=2, cex=.6)
```





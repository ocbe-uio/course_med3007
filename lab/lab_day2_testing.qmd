---
title: "R Lab (day 2): Multiple Testing"
format: 
  html:
    code-fold: false
    code-tools: true
---

Download datasets [here](https://github.com/ocbe-uio/course_med3007/tree/main/lab/data) or from Canvas.

R scripts

* [Code](https://github.com/ocbe-uio/course_med3007/blob/main/lab/code/MED3007_Lab1.R))
* [Code (solution)](https://github.com/ocbe-uio/course_med3007/blob/main/lab/code/MED3007_Lab2_pca.R)


## Exercise 1: brain data

```{r}
#| label: ttest-brain-loaddata
#| warning: false
#| echo: true

load('data/data_brainshake.RData')
data <- as.data.frame(mydatanew)
head(data)
```


Some descriptive statistics of each variable

```{r}
#| label: ttest-brain-summary
#| warning: false
#| echo: true

summary(data) # summary for each variable
names(data) # column names
```

Ddescriptive plots: boxplot and histogram (for one specific variable across groups)

```{r}
#| label: ttest-brain-plots
#| warning: false
#| echo: true

par(mfrow=c(1,2)) # plot 2 figures side by side
boxplot(BMI ~ kjonn, data)
boxplot(tot.kol ~ kjonn, data)
hist(data$BMI)

# histogram
BMI_group1 <- data[which(data$kjonn==0),'BMI']
BMI_group2 <- data[which(data$kjonn==1),'BMI']

hist(BMI_group1) #men
hist(BMI_group2) #females
```

### t-test

We carry out a t-test to find out whether there is a significant difference for BMI between the two genders.

```{r}
#| label: ttest-brain-ttest1
#| warning: false
#| echo: true

out <- t.test(data[which(data$kjonn==0),'BMI'],data[which(data$kjonn==1),'BMI'], alternative='greater')
# much more clever syntax
out <- t.test(BMI ~ kjonn, data, alternative='greater')
out
names(out)
out$p.value
pvalue <- out$p.value
pvalue
```


You can also just run the t-test and not save it to an object. But it is often useful to save it, because you have access to the p-values and do not need to copy paste it from the console.

```{r}
#| label: ttest-brain-ttest2
#| warning: false
#| echo: true
t.test(BMI ~ kjonn, data, alternative='greater')
```


Check normality assumption.

```{r}
#| label: ttest-brain-qq
#| warning: false
#| echo: true
# QQ-plots:
par(mfrow=c(1,2)) # plot-window with two columns
qqnorm(BMI_group1, main = 'BMI - male')
qqline(BMI_group1)
qqnorm(BMI_group2, main = 'BMI - female')
qqline(BMI_group2)

# test data for normality
shapiro.test(BMI_group1)
shapiro.test(BMI_group2)
```



## Exercise 2

Load the data from the file "Testfil_Rcourse.xlsx" and consider the variable `vitD_v1`.

1. plot the histogram of this variable and save it, and then also plot the boxplot of vitD_v1 stratified according to gender.

Does this variable look normally distributed?

2. Perform a t-test to verify that `vitD_v1` is different across gender groups

(Solution see R script [MED3007_Lab1_exercise_solution.R]())


## Exercise 3: NCI60

Now we move to a typical large-scale biological data set which will be our running example throughout the course.

The NCI60 cancer cell line microarray data set consists of 6830 gene expression measurements on 64 cancer cell lines. It is available in the R package ISLR, which is the compendium R package to the book by James et al. (2013).

(It is not really a testing example, but we use it this way for illustration)

```{r}
#| label: ttest-nci60-loaddata
#| warning: false
#| echo: true
load('data/NCI60.RData')

nci.labs <- NCI60$labs # Sample labels (tissue type)
nci.data <- NCI60$data # Gene expression data set

# some basic summary
length(nci.labs)
dim(nci.data)
table(nci.labs)
```


We create a grouping in 2 macro-groups of cancers, to test for gene expression differences across these 2 groups only. Those 2 groups should be relatively far in terms of genomic characteristics.

```{r}
#| label: ttest-nci60-process
#| warning: false
#| echo: true

ind1 <- which(nci.labs=='BREAST' | nci.labs=='OVARIAN' | nci.labs=='PROSTATE')
ind2 <- which(nci.labs=='LEUKEMIA' | nci.labs=='MELANOMA' | nci.labs=='NSCLC' | nci.labs=='RENAL') # blood, skin, lung, kidney

cancer.type <- c(rep(1, length(ind1)), rep(2, length(ind2))) # we have two "cancer type" groups
mydata <- nci.data[c(ind1, ind2) , ]
dim(mydata)
```

Some descriptive statistics

```{r}
#| label: ttest-nci60-summary
#| warning: false
#| echo: true

# mean across patients for each gene
genes.means <- apply(mydata, 2, mean) #1=rows, 2=columns
genes.var <- apply(mydata, 2, var)

plot(genes.means, xlab = 'genes', main = 'mean across samples', ylab = 'mean expr')
abline(h=0, col=3)

# we can try to compute the within group means and plot in different colors..
genes.gr.means <- apply(mydata, 2, function(x){tapply(x, cancer.type, mean)})
plot(genes.gr.means[1,], xlab = 'genes', main = 'within-group mean across samples', 
     ylim = range(genes.gr.means), ylab = 'mean expr')
points(genes.gr.means[2,], col=2)
abline(h=0)
```


### t-test for genes

```{r}
#| label: ttest-nci60-test
#| warning: false
#| echo: true

alpha <- .05
pval.ttest <- apply(mydata, 2, function(x){t.test(x[which(cancer.type==1)], x[which(cancer.type==2)])$p.value})
```

Investigate closely on one gene

```{r}
#| label: ttest-nci60-onegene
#| warning: false
#| echo: true

x <- mydata[,1] #gene 1
x1 <- x[which(cancer.type==1)] #select values for group 1
x2 <- x[which(cancer.type==2)] #select values for group 2
res <- t.test(x1, x2) #do the t-test
res #show a summary of the test result
res$p.value #extract the p-value

hist(pval.ttest)

# bit more details for nicer plotting
hist(pval.ttest, breaks = 1/alpha, xlab = 'p-values', ylab = 'counts', 
     main = 'Histogram of t-test p-values across genes')
```

The histogram of the p-values shows nearly uniform values but we see a slight peak around 0.


###Â Multiple testing correction

```{r}
#| label: ttest-nci60-pval
#| warning: false
#| echo: true

# How many significant p-values (without any correction)
sum(pval.ttest < alpha)

# how many expected false positives?
Vexp <- alpha*dim(mydata)[2]  # this is the expected value of V from the slides
Vexp
```

We adjust the p-values

```{r}
#| label: ttest-nci60-pvaladjust
#| warning: false
#| echo: true

# Simple way of calculation adjusted p-values (using p.adjust()):
pval.fwer <- p.adjust(pval.ttest, method = "bonferroni")
pval.fdr <- p.adjust(pval.ttest, method = "BH")

# Number of significant p-values after Bonferroni correction
sum(pval.fwer < alpha) # conservative

# Number of significant p-values after BH correction
sum(pval.fdr  < alpha)
```

Conclusion: no significant difference in gene expression across the groups! 



## Exercise 4

Consider the gene expression data set "Ch10Ex11.csv" that consists of 40 tissue samples with measurements on 1,000 genes. The first 20 samples are from healthy patients, while the second 20 are from a diseased group.

1. Load in the data using read.csv(). You will need to select header=F.

2. Have a look at the data and describe them with appropriate descriptive measures.

3. Your collaborator wants to know which genes differ the most across the two groups.

Suggest a way to answer this question, and apply it here.




